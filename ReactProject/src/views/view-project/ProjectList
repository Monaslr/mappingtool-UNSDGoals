import React, { useEffect, useState, useRef } from 'react';
import axios from 'axios';
import ProjectItem from './ProjectItem';
import SDGFilter from './SDGFilter';
import styled from 'styled-components';
import Goal from '../../components/SDGs/Goal';
import apiCalls from '../../api';


const PageWrapper = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
`;
const ProjectListWrapper = styled.div.attrs({

})`
  display: flex;
  justify-content: space-between;
  width:100%;
  max-width:1200px;
`;

const ProjectsContainer = styled.div.attrs({

})`
  flex: 3;
  padding-right: 20px;
  display: flex;
  flex-direction: column;
`;

const ProjectsBorderWrapper = styled.div`
  border: 2px solid #ccc; 
  border-radius: 8px; 
  padding: 10px; 
  width:100%;
  display: flex;
  flex-direction: column;
  height: 100%;
`;
const FilterContainer = styled.div.attrs({

})`
  //padding-left:30px;
  margin-top: 0;
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
`;

const ProjectsWrapper = styled.div.attrs({

})`
  display: flex;
  flex-direction: column;
  gap: 10px;
  width:100%;
`;

const SearchBarWrapper = styled.div`
  display: flex;
  width: 100%;
  margin-bottom: 10px;
  align-items: center;
  //justify-content: space-between;
`;

const SearchBarContainer = styled.div`
  display: flex;
  flex: 1;
`;

const SearchBar = styled.input`
  flex: 1;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px 0 0 4px;
  height: 40px;
`;

const SearchButton = styled.button`
  padding: 10px 20px;
  background-color: purple;
  color: white;
  border: none;
  border-radius: 0 4px 4px 0;
  cursor: pointer;
  height: 40px;

  &:hover {
    background-color: darkviolet;
  }
`;


const InfoText = styled.p`
  margin-left: 20px;
  white-space: nowrap;
  display: flex;
  justify-content: space-between;
  width:100%;
  max-width:1200px;
`;

const ProjectList = () => 
{
  const [projects, setProjects] = useState([]); 
  const [textSearch, setTextSearch] = useState('');
  const [selectedFilterGoals, setSelectedFilterGoals] = useState([]);
  const [goalsFromProjects, setGoalsFromProjects] = useState([]);
  const [filteredProjects, setFilteredProjects] = useState([]);
  const [loading, setLoading] = useState(true);
  const [user, setUser] = useState(null);

  const calledAPI = useRef(false);

  
  useEffect(() => 
    {  
      if (!calledAPI.current){
        apiCalls.getProjects()
        .then(response => {
          const allProjects = response.data.data;
          setProjects(allProjects);
          setFilteredProjects(allProjects);
          setLoading(false);

          const extractedGoals = [];
          allProjects.map(project=>{
            project.map(goal => {
              if (!extractedGoals.includes(goal)){
                extractedGoals.push(goal);
              }
            })
          });
          setGoalsFromProjects(extractedGoals);
        })
        .catch(error => {
          console.error('Error fetching projects:', error);
          setLoading(false);
        });
      }
    }, []);
    // console.log("ProjectList->user: ", user);
    console.log("ProjectList->projects: ", projects);

    // useEffect(() => {
    //   axios.get('http://localhost:3001/api/users/')
    //     .then(response => {
    //       setProjectUser(response.data.data);
    //     })
    // }, []);
    

    // console.log("PROJECTS ->", projects);
    // console.log("PROJECTUSER ->: ", projectUser);

    if (loading) 
    {
        return <div>Loading...</div>;
    }
  

     // Build array of filtered goals
     const filteredGoalChangeHandler = (goal) => {
      selectedFilterGoals((prevSelectedFilterGoals) => prevSelectedFilterGoals.includes(goal)
                            ? prevSelectedFilterGoals.filter((fGoal)=> fGoal !== goal)
                            : [...prevSelectedFilterGoals, goal]
    )}

    // handle Search logic
    const searchHandler = () => {
      const keywords = textSearch.toLocaleLowerCase().split(',').map(keyword => keyword.trim());
      const fProjects = projects.filter((project)=> {
        const projectDesc = (project.project_desc + project.tag + project.project_name) || '';
        const searchMatching = keywords.some(keyword => projectDesc.toLowerCase().includes(keyword));
        const selectedFilterGoalsMatching = 
        selectedFilterGoals.length === 0 || selectedFilterGoals.some((goal) => project.goals.includes(goal));
        return searchMatching && selectedFilterGoalsMatching;
      });
      setFilteredProjects(fProjects);
      console.log("ProjectList->searchHandler: ", fProjects);
    };

    console.log("ProjectList->projects: ", projects);
    console.log("ProjectList->FilteredProjects: ", filteredProjects);
   

    return (
      <PageWrapper>
      <h1>Projects</h1>
      <InfoText>To see more information click on your desired projects.</InfoText>
      <ProjectListWrapper>
        <ProjectsContainer>
          <ProjectsWrapper>
            {
              
              filteredProjects.map(proj => (
                <ProjectsBorderWrapper key={proj.id}>
                  <ProjectItem project = {proj} user={user} setUser={setUser} />
                </ProjectsBorderWrapper>
              ))
            } 
          </ProjectsWrapper>
        </ProjectsContainer>
        <FilterContainer>
          <SearchBarWrapper>
            <SearchBar type="search" placeholder="Search projects..." 
             value={textSearch}
             onChange={(event) => setTextSearch(event.target.value)}
            />
            <SearchButton onClick={searchHandler}>Search</SearchButton>
          </SearchBarWrapper>
          <SDGFilter onClick={filteredGoalChangeHandler} />
        </FilterContainer>
      </ProjectListWrapper>
      <Goal />
    </PageWrapper>

  );
};

export default ProjectList;
